[{"id":0,"href":"/docs/dev/","title":"Dev","section":"Docs","content":" Development # Record something about software development.\nDirectory # 基本知识 目录 # 基本环境 目录 # 安装 下载 # Go 官方下载地址： https://go.dev/dl/ https://developer.apple.com/download/all/ 安装 # MacOS 下载后按正常程序安装即可， 默认安装路径：/usr/local Linux 安装依赖（以 ubuntu 为例） sudo apt-get install mercurial git gcc 下载 Go 的压缩包 wget https://go.dev/dl/go1.17.8.linux-amd64.tar.gz tar -C /usr/local -xzf https://go.dev/dl/go1.17.8.linux-amd64.tar.gz 在/etc/profile添加以下环境变量 export GOROOT=/usr/local/go export PATH=$GOROOT/bin:$PATH export GOPATH=/home/go # Go1.12之后可不设置 使环境变量生效 source /etc/profile Windows 下载后按正常程序安装，默认安装在ProgramFiles或者ProgramFiles(x86)，可视情况修改。 打开环境变量设置：我的电脑 -\u0026gt; 属性 -\u0026gt; 高级设置 -\u0026gt; 环境变量 设置以下环境变量 GOROOT：设置为 Go 的安装路径 path：%GOROOT%\\bin GOPATH：放工程的目录（Go1.12 之后可不设置） 验证 # 命令行运行go version查看是否正常输出 参考链接： https://go. "},{"id":1,"href":"/docs/dev/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83/","title":"基本环境","section":"基本知识","content":" 目录 # 安装 下载 # Go 官方下载地址： https://go.dev/dl/ https://developer.apple.com/download/all/ 安装 # MacOS 下载后按正常程序安装即可， 默认安装路径：/usr/local Linux 安装依赖（以 ubuntu 为例） sudo apt-get install mercurial git gcc 下载 Go 的压缩包 wget https://go.dev/dl/go1.17.8.linux-amd64.tar.gz tar -C /usr/local -xzf https://go.dev/dl/go1.17.8.linux-amd64.tar.gz 在/etc/profile添加以下环境变量 export GOROOT=/usr/local/go export PATH=$GOROOT/bin:$PATH export GOPATH=/home/go # Go1.12之后可不设置 使环境变量生效 source /etc/profile Windows 下载后按正常程序安装，默认安装在ProgramFiles或者ProgramFiles(x86)，可视情况修改。 打开环境变量设置：我的电脑 -\u0026gt; 属性 -\u0026gt; 高级设置 -\u0026gt; 环境变量 设置以下环境变量 GOROOT：设置为 Go 的安装路径 path：%GOROOT%\\bin GOPATH：放工程的目录（Go1.12 之后可不设置） 验证 # 命令行运行go version查看是否正常输出 参考链接： https://go.dev/doc/install 多版本管理 想要在同一个设备管理多个Go版本，有以下几种方法： 官方提供 g gvm goup goenv 目录 # 官方 需要先安装某一版本的 Go，且切换不是很方便 G 推荐使用 Gvm Shell 实现，故无法在 windows 上使用。 环境变量 查看 Go 相关的环境变量 # go env 设置方法 # Go version \u0026gt;= 1.13 # go env -w \u0026lt;环境变量名\u0026gt;=\u0026lt;值\u0026gt; Go version \u0026lt; 1.13 # MacOS 在~/.profile添加环境变量 export \u0026lt;环境变量名\u0026gt;=\u0026lt;值\u0026gt; 使环境变量生效 source /etc/profile Linux 在/etc/profile添加环境变量 export \u0026lt;环境变量名\u0026gt;=\u0026lt;值\u0026gt; 使环境变量生效 source /etc/profile Windows 我的电脑 -\u0026gt; 属性 -\u0026gt; 高级设置 -\u0026gt; 环境变量 环境变量参考 # 关于默认值：* 代表视情况而定，- 代表空值 通用 # 变量名 默认 描述 GO111MODULE auto 控制GO命令是在module aware模式下运行还是在GOPATH模式下运行。参考： https://golang.org/ref/mod#mod-commands. 可用值：on/off/auto GCCGO gccgo 运行go build -compiler=gccgo时的gccgo命令 GOARCH * 要为其编译代码的体系结构或处理器。 GOBIN - go install安装命令的目录。 GOCACHE * 将在其中存储缓存信息以便在将来的构建中重复使用的目录。 GOMODCACHE $GOPATH/mod 将存储下载的模块的目录。 GODEBUG - 使能各种调试信息。参考go doc runtime。 GOENV * 环境配置文件所在的路径，不能使用go wnv -w设置 GOFLAGS - 空格分隔的-flag=value列表，用于各种go命令，可被覆盖如果命令中有flag列表 GOINSECURE - 逗号分隔的模块路径前缀列表，应始终以不安全的方式获取。但仅适用于直接提取的依赖项。GOINSECURE不禁用校验和数据库验证。可以使用GOPRIVATE或GONOSUMDB来实现这一点。 GOOS * 要为其编译代码的操作系统。比如：linux, darwin, windows, netbsd GOPATH * GOPATH模式下，Go的工程代码路径。 GOPROXY https://goproxy. Go Module 加速 代理源 # Goproxy 中国 # 中国最可靠的 Go 模块代理。 Goproxy 中国完全实现了 Go 的 模块代理协议。并且它是一个由中国备受信赖的云服务提供商 七牛云支持的非营利性项目。我们的目标是为中国和世界上其他地方的 Gopher 们提供一个免费的、可靠的、持续在线的且经过 CDN 加速的模块代理。请在 status.goproxy.cn 订阅我们的有关系统性能的实时和历史数据。 请注意，Goproxy 中国只专注于服务在 https://goproxy.cn 的 Web 应用本身的开发。如果你正在寻找一种极其简单的方法来搭建你自己的 Go 模块代理，那么你应该看一下 Goproxy，Goproxy 中国就是基于它开发的。 代理地址： https://goproxy.cn 阿里云 Go Module 代理仓库服务 # go module 公共代理仓库，代理并缓存 go 模块。你可以利用该代理来避免 DNS 污染导致的模块拉取缓慢或失败的问题，加速你的构建 代理地址： https://mirrors.aliyun.com/goproxy/ 用法 # 设置以下两个环境变量 GO111MODULE=on # Go1.16之后默认开启，可以不设置 GOPROXY=https://goproxy.cn,direct 设置方法参考 环境变量 卸载 Linux/MacOS/FreeBSD 删除 go 目录，默认是/use/local/go 删除环境变量 Windows 进入控制面板，点击添加/卸载程序 选择 Go，右键卸载 删除相关的环境变量 或者在命令行使用以下命令： msiexec /x go{{version}}.windows-{{cpu-arch}}.msi /q 这个命令可以自动清除安装时创建的环境变量 参考链接： https://go.dev/doc/manage-install#uninstalling 快速入门 创建工程/模块 # 创建目录 mkdir test cd test 开启依赖管理 基本工程 go mod init test test 为工程名，也可使用 example/test 这种多层形式 基本模块 go mod init example.com/test 模块开头必须是域名，别的工程引用时会通过域名去查找模块 创建代码文件 touch main.go 编辑文件 工程示例代码： package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } 模块示例代码： package greetings import \u0026#34;fmt\u0026#34; // Hello returns a greeting for the named person. func Hello(name string) string { // Return a greeting that embeds the name in a message. message := fmt. "},{"id":2,"href":"/docs/dev/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/","title":"基本知识","section":"Dev","content":" 目录 # 基本环境 目录 # 安装 下载 # Go 官方下载地址： https://go.dev/dl/ https://developer.apple.com/download/all/ 安装 # MacOS 下载后按正常程序安装即可， 默认安装路径：/usr/local Linux 安装依赖（以 ubuntu 为例） sudo apt-get install mercurial git gcc 下载 Go 的压缩包 wget https://go.dev/dl/go1.17.8.linux-amd64.tar.gz tar -C /usr/local -xzf https://go.dev/dl/go1.17.8.linux-amd64.tar.gz 在/etc/profile添加以下环境变量 export GOROOT=/usr/local/go export PATH=$GOROOT/bin:$PATH export GOPATH=/home/go # Go1.12之后可不设置 使环境变量生效 source /etc/profile Windows 下载后按正常程序安装，默认安装在ProgramFiles或者ProgramFiles(x86)，可视情况修改。 打开环境变量设置：我的电脑 -\u0026gt; 属性 -\u0026gt; 高级设置 -\u0026gt; 环境变量 设置以下环境变量 GOROOT：设置为 Go 的安装路径 path：%GOROOT%\\bin GOPATH：放工程的目录（Go1.12 之后可不设置） 验证 # 命令行运行go version查看是否正常输出 参考链接： https://go.dev/doc/install 多版本管理 想要在同一个设备管理多个Go版本，有以下几种方法： 官方提供 g gvm goup goenv 目录 # 官方 需要先安装某一版本的 Go，且切换不是很方便 G 推荐使用 Gvm Shell 实现，故无法在 windows 上使用。 环境变量 查看 Go 相关的环境变量 # go env 设置方法 # Go version \u0026gt;= 1. "},{"id":3,"href":"/docs/dev/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83/%E5%AE%89%E8%A3%85/","title":"安装","section":"基本环境","content":" 下载 # Go 官方下载地址：\nhttps://go.dev/dl/ https://developer.apple.com/download/all/ 安装 # MacOS 下载后按正常程序安装即可， 默认安装路径：/usr/local Linux 安装依赖（以 ubuntu 为例）\nsudo apt-get install mercurial git gcc 下载 Go 的压缩包\nwget https://go.dev/dl/go1.17.8.linux-amd64.tar.gz tar -C /usr/local -xzf https://go.dev/dl/go1.17.8.linux-amd64.tar.gz 在/etc/profile添加以下环境变量\nexport GOROOT=/usr/local/go export PATH=$GOROOT/bin:$PATH export GOPATH=/home/go # Go1.12之后可不设置 使环境变量生效\nsource /etc/profile Windows 下载后按正常程序安装，默认安装在ProgramFiles或者ProgramFiles(x86)，可视情况修改。 打开环境变量设置：我的电脑 -\u0026gt; 属性 -\u0026gt; 高级设置 -\u0026gt; 环境变量 设置以下环境变量 GOROOT：设置为 Go 的安装路径 path：%GOROOT%\\bin GOPATH：放工程的目录（Go1.12 之后可不设置） 验证 # 命令行运行go version查看是否正常输出\n参考链接： https://go.dev/doc/install\n"},{"id":4,"href":"/docs/dev/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83/%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/%E5%AE%98%E6%96%B9/","title":"官方","section":"多版本管理","content":"需要先安装某一版本的 Go，且切换不是很方便\n前提条件：\ngit go 安装 # 使用具体版本号代替 X.Y.Z\ngo install golang.org/dl/goX.Y.Z@latest goX.Y.Z download 使用 # goX.Y.Z version 如需替换默认的 go 命令，建议使用软连接去链接新版本的 go 可执行文件\n卸载 # goX.Y.Z env GOROOT 删除得到的 GOROOT 路径以及 goX.Y.Z 的二进制文件即可\n参考链接： https://go.dev/doc/manage-install\n"},{"id":5,"href":"/docs/dev/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83/%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/g/","title":"G","section":"多版本管理","content":"推荐使用\ng是一个 Linux、macOS、Windows 下的命令行工具，可以提供一个便捷的多版本 go 环境的管理和切换。\n特性 # 支持列出可供安装的 go 版本号 支持列出已安装的 go 版本号 支持在本地安装多个 go 版本 支持卸载已安装的 go 版本 支持在已安装的 go 版本之间自由切换 支持清空安装包文件缓存 支持软件自我更新（\u0026gt;= 1.5.0） 支持软件绿色卸载（\u0026gt;= 1.5.0） 安装 # 自动化安装 # Linux/MacOS # 建议安装前清空`GOROOT`、`GOBIN`等环境变量 $ curl -sSL https://raw.githubusercontent.com/voidint/g/master/install.sh | bash $ echo \u0026#34;unalias g\u0026#34; \u0026gt;\u0026gt; ~/.bashrc # 可选。若其他程序（如\u0026#39;git\u0026#39;）使用了\u0026#39;g\u0026#39;作为别名。 $ source \u0026#34;$HOME/.g/env\u0026#34; Windows（适用于 pwsh） iwr https://raw.githubusercontent.com/voidint/g/master/install.ps1 -useb | iex 手动安装 # Linux/MacOS 创建 g 家目录（推荐~/.g目录）\n下载 release的二进制压缩包，并解压至 g 家目录下的 bin 子目录中（即~/.g/bin目录）。\n将所需的环境变量写入~/.g/env文件\n$ cat \u0026gt;~/.g/env \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; #!/bin/sh # g shell setup export GOROOT=\u0026#34;${HOME}/.g/go\u0026#34; export PATH=\u0026#34;${HOME}/.g/bin:${GOROOT}/bin:$PATH\u0026#34; export G_MIRROR=https://golang.google.cn/dl/ EOF 将~/.g/env导入到 shell 环境配置文件（如~/.bashrc、~/.zshrc\u0026hellip;）\n$ cat \u0026gt;\u0026gt;~/.bashrc \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; # g shell setup if [ -f \u0026#34;${HOME}/.g/env\u0026#34; ]; then . \u0026#34;${HOME}/.g/env\u0026#34; fi EOF 启用环境变量\nsource ~/.bashrc # 或source ~/.zshrc Windows 创建目录mkdir ~/.g/bin\n下载 release的 windows 版本的二进制压缩包, 解压之后放到~/.g/bin目录下\n默认二进制文件名是 g.exe, 如果你已经用 g 这个命令已经用作为 git 的缩写，那么你可以把 g.exe 改为其他名字，如 gvm.exe\n执行命令code $PROFILE, 这个命令会用 vscode 打开默认的 powershell 配置文件\n在 powershell 的默认配置文件中加入如下内容\n$env:GOROOT=\u0026#34;$HOME\\.g\\go\u0026#34; $env:Path=-join(\u0026#34;$HOME\\.g\\bin;\u0026#34;, \u0026#34;$env:GOROOT\\bin;\u0026#34;, \u0026#34;$env:Path\u0026#34;) 再次打开 powershell 终端，就可以使用 g 或者 gvm 命令了\n使用 # 查询当前可供安装的stable状态的 go 版本\n$ g ls-remote stable 1.19.10 1.20.5 安装目标 go 版本1.20.5\n$ g install 1.14.7 Downloading 100% [===============] (92/92 MB, 12 MB/s) Computing checksum with SHA256 Checksums matched Now using go1.20.5 查询已安装的 go 版本\n$ g ls 1.19.10 * 1.20.5 查询可供安装的所有 go 版本\n$ g ls-remote 1 1.2.2 1.3 1.3.1 ... // 省略若干版本 1.19.10 1.20rc1 1.20rc2 1.20rc3 1.20 1.20.1 1.20.2 1.20.3 1.20.4 * 1.20.5 切换到另一个已安装的 go 版本\n$ g use 1.19.10 go version go1.19.10 darwin/arm64 卸载一个已安装的 go 版本\n$ g uninstall 1.19.10 Uninstalled go1.19.10 清空 go 安装包文件缓存\n$ g clean Remove go1.18.10.darwin-arm64.tar.gz Remove go1.19.10.darwin-arm64.tar.gz Remove go1.20.5.darwin-arm64.tar.gz 查看 g 版本信息\ng version 1.5.0 build: 2023-01-01T21:01:52+08:00 branch: master commit: cec84a3f4f927adb05018731a6f60063fd2fa216 更新 g 软件本身\n$ g self update You are up to date! g v1.5.0 is the latest version. 卸载 g 软件本身\n$ g self uninstall Are you sure you want to uninstall g? (Y/n) y Remove /Users/voidint/.g/bin/g Remove /Users/voidint/.g "},{"id":6,"href":"/docs/ops/","title":"Ops","section":"Docs","content":" Operations # Record something about software platform operations.\nDirectory # "},{"id":7,"href":"/docs/dev/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83/%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/","title":"多版本管理","section":"基本环境","content":"想要在同一个设备管理多个Go版本，有以下几种方法：\n官方提供 g gvm goup goenv 目录 # 官方 需要先安装某一版本的 Go，且切换不是很方便\nG 推荐使用\nGvm Shell 实现，故无法在 windows 上使用。\n"},{"id":8,"href":"/docs/dev/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83/%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/gvm/","title":"Gvm","section":"多版本管理","content":"Shell 实现，故无法在 windows 上使用。\nGitHub 仓库： gvm\n安装 # bash \u0026lt; \u0026lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer) 使用 # gvm list # 列出当前安装的go版本 gvm listall # 列出可安装的go版本 gvm install go1.16 # 选择对应版本进行安装 gvm use go1.16 [--default] # 使用对应的go版本 注意：Go 1.5+从工具链中删除了 C 编译器，并将其替换为一个用 Go 编写的编译器。显然，如果你还没有一个正常的 Go 安装，这会造成一个引导问题。为了编译 Go 1.5+，请确保先安装 Go 1.4。\n卸载原本的 go # Linux sudo rm -rf /usr/local/go 编辑 /etc/profile 删除相关的环境变量\n- export PATH=$PATH:/usr/local/go/bin MacOS sudo rm -rf /etc/paths.d/go 卸载 # gvm implode "},{"id":9,"href":"/docs/sec/","title":"Sec","section":"Docs","content":" Security # Record something about software security.\nDirectory # "},{"id":10,"href":"/docs/dev/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/","title":"环境变量","section":"基本环境","content":" 查看 Go 相关的环境变量 # go env 设置方法 # Go version \u0026gt;= 1.13 # go env -w \u0026lt;环境变量名\u0026gt;=\u0026lt;值\u0026gt; Go version \u0026lt; 1.13 # MacOS 在~/.profile添加环境变量 export \u0026lt;环境变量名\u0026gt;=\u0026lt;值\u0026gt; 使环境变量生效 source /etc/profile Linux 在/etc/profile添加环境变量 export \u0026lt;环境变量名\u0026gt;=\u0026lt;值\u0026gt; 使环境变量生效 source /etc/profile Windows 我的电脑 -\u0026gt; 属性 -\u0026gt; 高级设置 -\u0026gt; 环境变量 环境变量参考 # 关于默认值：* 代表视情况而定，- 代表空值\n通用 # 变量名 默认 描述 GO111MODULE auto 控制GO命令是在module aware模式下运行还是在GOPATH模式下运行。参考： https://golang.org/ref/mod#mod-commands. 可用值：on/off/auto GCCGO gccgo 运行go build -compiler=gccgo时的gccgo命令 GOARCH * 要为其编译代码的体系结构或处理器。 GOBIN - go install安装命令的目录。 GOCACHE * 将在其中存储缓存信息以便在将来的构建中重复使用的目录。 GOMODCACHE $GOPATH/mod 将存储下载的模块的目录。 GODEBUG - 使能各种调试信息。参考go doc runtime。 GOENV * 环境配置文件所在的路径，不能使用go wnv -w设置 GOFLAGS - 空格分隔的-flag=value列表，用于各种go命令，可被覆盖如果命令中有flag列表 GOINSECURE - 逗号分隔的模块路径前缀列表，应始终以不安全的方式获取。但仅适用于直接提取的依赖项。GOINSECURE不禁用校验和数据库验证。可以使用GOPRIVATE或GONOSUMDB来实现这一点。 GOOS * 要为其编译代码的操作系统。比如：linux, darwin, windows, netbsd GOPATH * GOPATH模式下，Go的工程代码路径。 GOPROXY https://goproxy.io,direct Go模块代理的URL。参考： https://go.dev/ref/mod#module-proxy GOPRIVATE - 逗号分隔的模块路径前缀列表，这些模块应该始终直接获取，或者不应该与校验和数据库进行比较。参考： https://go.dev/ref/mod#private-modules. GONOPROXY - 逗号分隔的模块路径前缀列表，这些模块应该始终直接获取，或者不应该与校验和数据库进行比较。参考： https://go.dev/ref/mod#private-modules. GONOSUMDB - 逗号分隔的模块路径前缀列表，这些模块应该始终直接获取，或者不应该与校验和数据库进行比较。参考： https://go.dev/ref/mod#private-modules. GOROOT * Go的安装路径。 GOSUMDB \u0026ldquo;sum.golang.org\u0026rdquo; 要使用的校验和数据库的名称，还可以选择其公钥和URL，参考： https://go.dev/ref/mod#authenticating GOTMPDIR - go命令将在其中写入临时源文件、软件包和二进制文件的目录。 GOVCS - 列出可与匹配服务器一起使用的版本控制命令。参考 ’go help vcs' CGO相关 # 变量名 默认 描述 AR ar 使用gccgo编译器生成时用于操作库归档的命令。 CC clang 用于编译C代码的命令 CGO_ENABLED 1 是否支持cgo命令。0或1。 CGO_CFLAGS -g -O2 编译C代码时CGO将传递给编译器的标志。 CGO_CFLAGS_ALLOW - 指定允许出现在#cgo CFLAGS源代码指令中的附加标志的正则表达式。不适用于CGO_CFLAGS环境变量。 CGO_CFLAGS_DISALLOW - 指定不允许出现在#cgo CFLAGS源代码指令中的附加标志的正则表达式。不适用于CGO_CFLAGS环境变量。 CGO_CPPFLAGS, CGO_CPPFLAGS_ALLOW, CGO_CPPFLAGS_DISALLOW - 与CGO_CFLAGS，CGO_CFLAGS_ALLOW，CGO_CFLAGS_DISALLOW类似，但是是用于C预处理器 CGO_CXXFLAGS, CGO_CXXFLAGS_ALLOW, CGO_CXXFLAGS_DISALLOW - 与CGO_CFLAGS，CGO_CFLAGS_ALLOW，CGO_CFLAGS_DISALLOW类似，但是是用于C++编译器 CGO_FFLAGS, CGO_FFLAGS_ALLOW, CGO_FFLAGS_DISALLOW - 与CGO_CFLAGS，CGO_CFLAGS_ALLOW，CGO_CFLAGS_DISALLOW类似，但是是用于Fortran编译器。 CGO_LDFLAGS, CGO_LDFLAGS_ALLOW, CGO_LDFLAGS_DISALLOW - 与CGO_CFLAGS，CGO_CFLAGS_ALLOW，CGO_CFLAGS_DISALLOW类似，但是是用于链接器 CXX clang++ 用于编译C++代码的命令。 FC - 用于编译Fortran代码的命令。 PKG_CONFIG pkg-config pkg-config工具的路径 特殊平台相关 # 变量名 描述 GOARM 对于GOARCH=ARM，为其编译的ARM体系结构。有效值为5、6、7。 GO386 对于GOARCH=386，如何实现浮点指令。有效值为SSE2(默认值)、SoftFloat。 GOMIPS 对于GOARCH=MIPS{，le}，是否使用浮点指令。有效值为hardFloat(默认值)、softFloat。 GOMIPS64 对于GOARCH=MIPS64{，LE}，是否使用浮点指令。有效值为hardFloat(默认值)、softFloat。 GOPPC64 对于GOARCH=ppc64{，le}，目标ISA(指令集体系结构)。有效值为POWER8(默认值)、POWER9。 GOWASM 对于GOARCH=wasm，要使用的实验性WebAssembly特性的列表，以逗号分隔。有效值为satconv、signext。 特殊用途相关 # 变量名 描述 GCCGOTOOLDIR 如果设置，则在何处查找gccgo工具，如cgo。默认值基于gccgo的配置方式。 GOEXPERIMENT 逗号分隔的要启用或禁用的工具链实验列表。可用实验的列表可能会随着时间的推移而任意改变。有关当前有效值的信息，请参见src/Internal/go实验/flag s.go。警告：此变量用于GO工具链本身的开发和测试。不支持超出该目的的使用。 GOROOT_FINAL 当go安装在构建位置以外的位置时的安装路径。堆栈跟踪中的文件名将从GOROOT重写为GOROOT_FINAL。 GO_EXTLINK_ENABLED 将-linkmode=auto与使用CGO的代码一起使用时，链接器是否应使用外部链接模式。设置为0将禁用外部链接模式，设置为1将启用该模式。 GIT_ALLOW_PROTOCOL 由Git定义。冒号分隔的允许与GIT FETCH/CLONE一起使用的方案列表。如果设置，任何未明确提到的方案都将被“Go Get”视为不安全。因为变量是由Git定义的，所以不能使用‘go env -w’设置默认值。 额外信息 # 变量名 描述 GOEXE 可执行文件名后缀（Windows 上为“.exe”，其他系统上为“”）。 GOGCCFLAGS 提供给 CC 命令的以空格分隔的参数列表。 GOHOSTArCH GO 工具链二进制文件的架构(GOARCH)。 GOHOSTOS Go 工具链二进制文件的操作系统（GOOS）。 GOMOD 主模块 go.mod 的绝对路径。如果启用了模块感知模式，但没有go.mod，则GOMOD将为os.DevNull(在类Unix系统上为“/dev/null”，在Windows上为“nul”)。如果禁用模块感知模式，则GOMOD将为空字符串。 GOTOOLDIR go工具（compile，cover，doc，etc\u0026hellip;）所在的目录 GOVERSION 已安装go的版本, 和runtime.Version一样 参考链接： https://pkg.go.dev/cmd/go#hdr-Environment_variables\n"},{"id":11,"href":"/docs/dev/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83/go-module%E6%BA%90%E5%8A%A0%E9%80%9F/","title":"Go Module 加速","section":"基本环境","content":" 代理源 # Goproxy 中国 # 中国最可靠的 Go 模块代理。\nGoproxy 中国完全实现了 Go 的 模块代理协议。并且它是一个由中国备受信赖的云服务提供商 七牛云支持的非营利性项目。我们的目标是为中国和世界上其他地方的 Gopher 们提供一个免费的、可靠的、持续在线的且经过 CDN 加速的模块代理。请在 status.goproxy.cn 订阅我们的有关系统性能的实时和历史数据。\n请注意，Goproxy 中国只专注于服务在 https://goproxy.cn 的 Web 应用本身的开发。如果你正在寻找一种极其简单的方法来搭建你自己的 Go 模块代理，那么你应该看一下 Goproxy，Goproxy 中国就是基于它开发的。\n代理地址： https://goproxy.cn\n阿里云 Go Module 代理仓库服务 # go module 公共代理仓库，代理并缓存 go 模块。你可以利用该代理来避免 DNS 污染导致的模块拉取缓慢或失败的问题，加速你的构建\n代理地址： https://mirrors.aliyun.com/goproxy/\n用法 # 设置以下两个环境变量\nGO111MODULE=on # Go1.16之后默认开启，可以不设置 GOPROXY=https://goproxy.cn,direct 设置方法参考 环境变量\n"},{"id":12,"href":"/docs/others/","title":"Others","section":"Docs","content":" Directory # "},{"id":13,"href":"/docs/dev/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83/%E5%8D%B8%E8%BD%BD/","title":"卸载","section":"基本环境","content":" Linux/MacOS/FreeBSD 删除 go 目录，默认是/use/local/go 删除环境变量 Windows 进入控制面板，点击添加/卸载程序 选择 Go，右键卸载 删除相关的环境变量 或者在命令行使用以下命令： msiexec /x go{{version}}.windows-{{cpu-arch}}.msi /q 这个命令可以自动清除安装时创建的环境变量\n参考链接： https://go.dev/doc/manage-install#uninstalling\n"},{"id":14,"href":"/docs/dev/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/","title":"快速入门","section":"基本环境","content":" 创建工程/模块 # 创建目录\nmkdir test cd test 开启依赖管理\n基本工程 go mod init test test 为工程名，也可使用 example/test 这种多层形式\n基本模块 go mod init example.com/test 模块开头必须是域名，别的工程引用时会通过域名去查找模块\n创建代码文件\ntouch main.go 编辑文件\n工程示例代码： package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } 模块示例代码： package greetings import \u0026#34;fmt\u0026#34; // Hello returns a greeting for the named person. func Hello(name string) string { // Return a greeting that embeds the name in a message. message := fmt.Sprintf(\u0026#34;Hi, %v. Welcome!\u0026#34;, name) return message } 保存退出并运行代码\ngo run 更新依赖 # 到 https://pkg.go.dev 中查找要使用的 package\n编辑代码，添加引用 package 语句以及代码饮用 示例代码如下：\npackage main import \u0026#34;fmt\u0026#34; import \u0026#34;rsc.io/quote\u0026#34; func main() { fmt.Println(quote.Go()) } 保存后更新依赖\ngo mod tidy 参考 # https://go.dev/doc/tutorial/getting-started https://go.dev/doc/tutorial/create-module "}]