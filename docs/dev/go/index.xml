<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Sanjo's Note</title><link>http://note.shit-hub.com/docs/dev/go/</link><description>Recent content in Go on Sanjo's Note</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://note.shit-hub.com/docs/dev/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go doc--文档管理器</title><link>http://note.shit-hub.com/docs/dev/go/godoc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://note.shit-hub.com/docs/dev/go/godoc/</guid><description>作用 # 打印与由Package相关参数（package，const，func，type，var，method或struct字段）标识的项目相关的文档注释，然后单行总结“ 项目（包的包级别声明，类型的方法等）。
使用方法 # go doc [-u] [-c] [package|[package.]symbol[.methodOrField]] Option Description -all 显示所有文档 -c 匹配程序实体时，大小写敏感 -cmd 将命令（main包）视为常规程序包 -src 显示完整源代码 -u 显示未导出的程序实体 编写文档规则 # 注释: // xxx 段落：行首字母大写 换行：添加一个注释空行 预格式化（示例代码）：行首缩进 在package, const, type, func等关键字上面并且紧邻关键字的注释才会被展示 // 此行注释被省略 // 此行注释被展示 // // 此行注释被展示2 package banana type, const, func以名称为注释的开头, package以Package name为注释的开头 // Package banana .</description></item><item><title>Go mod--依赖管理器</title><link>http://note.shit-hub.com/docs/dev/go/gomod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://note.shit-hub.com/docs/dev/go/gomod/</guid><description>Environment: Ubuntu + Go 1.13
Open Go module # Add forrowing environment variable:
1.11 or 1.12 export GO111MODULE=on export GOPROXY=https://goproxy.io 1.13 and later go env -w GO111MODULE=on go env -w GOPROXY=https://goproxy.cn,https://goproxy.io,direct Run that command after delete the origin environment variable.
Usage: go get # 使用go module之后，go get 拉取依赖的方式就发生了变化 下载项目依赖
go get ./... 拉取最新的版本(优先择取 tag)
go get golang.org/x/text@latest 拉取 master 分支的最新 commit
go get golang.</description></item><item><title>Init--初始化函数</title><link>http://note.shit-hub.com/docs/dev/go/init/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://note.shit-hub.com/docs/dev/go/init/</guid><description>作用 # 初始化不能采用初始化表达式初始化的变量。 程序运行前的注册。 实现sync.Once功能。 规则 # 先于main函数自动执行。 不能被其他函数调用。 没有输入参数、返回值。 每个包可以有多个init函数。 包的每个源文件也可以有多个init函数。 同一个包的init执行顺序，golang没有明确定义。 不同包的init函数按照包导入的依赖关系决定执行顺序。 备注 # 设置GODEBUG环境变量: inittrace=1，可以在运行时会为每个包的 init 打印一行标准错误信息，总结其执行时间和内存分配。 若只想调用该包的init函数，不使用包导出的变量或者方法，可使用类似以下方法导入： import _ &amp;#34;net/http/pprof&amp;#34;</description></item><item><title>Grpc使用</title><link>http://note.shit-hub.com/docs/dev/go/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://note.shit-hub.com/docs/dev/go/grpc/</guid><description>Install # Install protoc wget https://github.com/protocolbuffers/protobuf/releases/download/v3.13.0/protoc-3.13.0-linux-x86_64.zip unzip protoc-3.13.0-linux-x86_64.zip -d /usr/local/protoc export PATH=$PATH:/usr/local/protoc/bin source ~/.bashrc Download protoc-gen-go go get -u github.com/golang/protobuf/protoc-gen-go go install $GOPATH/src/github.com/golang/protobuf/protoc-gen-go Usage # Create *.proto file // Specify syntax format, note that proto3 no supports required and optimal in proto2 anymore syntax = &amp;quot;proto3&amp;quot;; // Specifies the package name of the generated *.pb.go package grpc; // Specifies the package path of the generated *.</description></item><item><title>安装Grpcurl</title><link>http://note.shit-hub.com/docs/dev/go/grpcurl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://note.shit-hub.com/docs/dev/go/grpcurl/</guid><description>Environment:
System: linux Go: 1.13+ Install # Install dependent package mkdir -p $GOPATH/src/google.golang.org git clone https://github.com/protocolbuffers/protobuf-go.git $GOPATH/src/google.golang.org/protobuf git clone https://github.com/googleapis/go-genproto.git $GOPATH/src/google.golang.org/genproto git clone https://github.com/grpc/grpc-go.git $GOPATH/src/google.golang.org/grpc git clone https://github.com/golang/net.git $GOPATH/src/golang.org/x/net git clone https://github.com/golang/sys.git $GOPATH/src/golang.org/x/sys git clone https://github.com/golang/text.git $GOPATH/src/golang.org/x/text Download grpcurl go get github.com/fullstorydev/grpcurl Install go install $GOPATH/src/github.com/fullstorydev/grpcurl/cmd/grpcurl if tips no dependent package, go to $GOPATH/src/github.com/fullstorydev/grpcurl/ to run go build ./cmd/grpcurl</description></item></channel></rss>